#include <iostream>
#include <vector>
using namespace std;

// Hàm tìm mảng hợp của hai mảng
void findUnion(int A[], int B[], int n, int m) {
    vector<int> unionArr;
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (A[i] < B[j]) {
            unionArr.push_back(A[i++]);
        } else if (B[j] < A[i]) {
            unionArr.push_back(B[j++]);
        } else {
            unionArr.push_back(A[i]);
            i++; j++;
        }
    }
    while (i < n) {
        unionArr.push_back(A[i++]);
    }
    while (j < m) {
        unionArr.push_back(B[j++]);
    }
    for (int num : unionArr) {
        cout << num << " ";
    }
    cout << endl;
}

// Hàm tìm mảng giao của hai mảng
void findIntersection(int A[], int B[], int n, int m) {
    vector<int> intersectArr;
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (A[i] < B[j]) {
            i++;
        } else if (B[j] < A[i]) {
            j++;
        } else {
            intersectArr.push_back(A[i]);
            i++; j++;
        }
    }
    for (int num : intersectArr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int n, m;
        cin >> n >> m;
        int A[n], B[m];
        for (int i = 0; i < n; i++) {
            cin >> A[i];
        }
        for (int j = 0; j < m; j++) {
            cin >> B[j];
        }
        findUnion(A, B, n, m);
        findIntersection(A, B, n, m);
    }
    return 0;
}